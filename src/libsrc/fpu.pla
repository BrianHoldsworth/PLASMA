//
// SANE stack-based Floating Point Unit library
//
include "inc/cmdsys.plh"
include "inc/sane.plh"
include "inc/fpstr.plh"
//
// External interface to FPU library
//
predef reset, getEnv, setEnv, testExcept, setExcept, enterProc, exitProc
predef constPi, constE
predef pushInt, pushSgl, pushDbl, pushExt, pushStr
predef pullInt, pullSgl, pullDbl, pullExt, pullStr
predef loadInt, loadSgl, loadDbl, loadExt, loadStr
predef storInt, storSgl, storDbl, storExt, storStr
predef shiftUp, shiftDown, rotateUp, rotateDown, dup, swap, clear
predef add, sub, mul, div, rem
predef neg, abs, type, cmp, logb, scalb, trunc, round, sqrt, squared
predef cos, sin, tan, atan
predef log2X, log21X, lnX, ln1X, pow2X, pow21X, powEX, powE1X, powE21X, powXInt, powXY
predef compXY, annuityXY, randNum
//
// FP6502 functions
//
export word fpu = @reset
word = @setEnv, @getEnv, @testExcept, @setExcept, @enterProc, @exitProc
word = @constPi, @constE
word = @pushInt, @pushSgl, @pushDbl, @pushExt, @pushStr
word = @pullInt, @pullSgl, @pullDbl, @pullExt, @pullStr
word = @loadInt, @loadSgl, @loadDbl, @loadExt, @loadStr
word = @storInt, @storSgl, @storDbl, @storExt, @storStr
word = @shiftUp, @shiftDown, @rotateUp, @rotateDown, @dup, @swap, @clear
word = @add, @sub, @mul, @div, @rem
word = @neg, @abs, @type, @cmp
word = @logb, @scalb, @trunc, @round, @sqrt, @squared
//
// ELEMS6502 functions
//
word = @cos, @sin, @tan, @atan
word = @log2X, log21X, @lnX, @ln1X, @pow2X, @pow21X, @powEX, @powE1X, @powE21X, @powXInt, @powXY
word = @compXY, @annuityXY, @randNum
//
// Useful constants
//
byte ext_pi[t_extended] = $35,$C2,$68,$21,$A2,$DA,$0F,$C9,$00,$40
byte ext_e[t_extended]  = $9B,$4A,$BB,$A2,$5B,$54,$F8,$AD,$00,$40
//
// FP Stack
//
byte stack[t_extended*4]
word stackRegs[4]
//
// Environment access
//
def setEnv(env)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FOSETENV, env))
end
def getEnv
    sane:zpSave()
    return sane:zpRestore(sane:fpOp0(FOGETENV))
end
def testExcept(except)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FOTESTXCP, except))
end
def setExcept(except)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FOSETXCP, except))
end
def enterProc(pEnv)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FOPROCENTRY, pEnv))
end
def exitProc(env)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FOPROCEXIT, env))
end
//
// Stack manipulation routines
//
def rotateUp
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
end
def rotateDown
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
end
def shiftUp
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    memcpy(stackRegs[0], stackRegs[1], t_extended)
end
def shiftDown // drop
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
    memcpy(stackRegs[3], stackRegs[2], t_extended)
end
def _drop(passthru) // Internal version with passthru
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
    memcpy(stackRegs[3], stackRegs[2], t_extended)
    return passthru
end
def swap
    stackRegs[0], stackRegs[1] = stackRegs[1], stackRegs[0]
end
def _swap(passthru) // Internal version with passthru
    stackRegs[0], stackRegs[1] = stackRegs[1], stackRegs[0]
    return passthru
end
def dup
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    memcpy(stackRegs[0], stackRegs[1], t_extended)
end
def clear
    word zero
    zero = 0
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFINT|FOZ2X, stackRegs[0], @zero))
end
//
// Stack access
//
def pushInt(pInt)
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFINT|FOZ2X, stackRegs[0], pInt))
end
def pullInt(pInt)
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFINT|FOX2Z, pInt, stackRegs[0])))
end
def loadInt(pInt, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFINT|FOZ2X, stackRegs[reg & $03], pInt))
end
def storInt(pInt, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFINT|FOX2Z, pInt, stackRegs[reg & $03]))
end
def pushSgl(pSgl)
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFSGL|FOZ2X, stackRegs[0], pSgl))
end
def pullSgl(pSgl)
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFSGL|FOX2Z, pSgl, stackRegs[0])))
end
def loadSgl(pSgl, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFSGL|FOZ2X, stackRegs[reg & $03], pSgl))
end
def storSgl(pSgl, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFSGL|FOX2Z, pSgl, stackRegs[reg & $03]))
end
def pushDbl(pDbl)
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFDBL|FOZ2X, stackRegs[0], pDbl))
end
def pullDbl(pDbl)
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFDBL|FOX2Z, pDbl, stackRegs[0])))
end
def loadDbl(pDbl, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFDBL|FOZ2X, stackRegs[reg & $03], pDbl))
end
def storDbl(pDbl, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFDBL|FOX2Z, pDbl, stackRegs[reg & $03]))
end
def pushExt(pExt)
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOZ2X, stackRegs[0], pExt))
end
def pullExt(pExt)
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FOX2Z, pExt, stackRegs[0])))
end
def loadExt(pExt, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOZ2X, stackRegs[reg & $03], pExt))
end
def storExt(pExt, reg)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOX2Z, pExt, stackRegs[reg & $03]))
end
def pushStr(pStr)
    stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
    return str2ext(pStr, stackRegs[0])
end
def pullStr(pStr, intdigits, fracdigits, format)
    return _drop(ext2str(stackRegs[0], pStr, intdigits, fracdigits, format))
end
def loadStr(pStr, reg)
    return str2ext(pStr, stackRegs[reg])
end
def storStr(pStr, intdigits, fracdigits, format, reg)
    return ext2str(stackRegs[reg], pStr, intdigits, fracdigits, format)
end
//
// Basic math operations
//
def add
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FOADD, stackRegs[1], stackRegs[0])))
end
def sub
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FOSUB, stackRegs[1], stackRegs[0])))
end
def mul
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FOMUL, stackRegs[1], stackRegs[0])))
end
def div
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FODIV, stackRegs[1], stackRegs[0])))
end
def rem
    sane:zpSave()
    return _drop(sane:zpRestore(sane:fpOp2(FFEXT|FOREM, stackRegs[1], stackRegs[0])))
end
def neg
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FONEG, stackRegs[0]))
end
def abs
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FOABS, stackRegs[0]))
end
def type
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FOCLASS, stackRegs[0]))
end
def cmp
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOCMP, stackRegs[1], stackRegs[0]))
end
def trunc
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FOTTI, stackRegs[0]))
end
def round
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FORTI, stackRegs[0]))
end
def sqrt
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FOSQRT, stackRegs[0]))
end
def squared
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOMUL, stackRegs[0], stackRegs[0]))
end
def logb
    sane:zpSave()
    return sane:zpRestore(sane:fpOp1(FFEXT|FOLOGB, stackRegs[0]))
end
def scalb(scale)
    sane:zpSave()
    return sane:zpRestore(sane:fpOp2(FFEXT|FOSCALB, stackRegs[0], scale))
end
//
// Elems operations
//
def cos
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOCOSX, stackRegs[0]))
end
def sin
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOSINX, stackRegs[0]))
end
def tan
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOTANX, stackRegs[0]))
end
def atan
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOATANX, stackRegs[0]))
end
def log2X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOLOG2X, stackRegs[0]))
end
def log21X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOLOG21X, stackRegs[0]))
end
def lnX
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOLNX, stackRegs[0]))
end
def ln1X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOLN1X, stackRegs[0]))
end
def pow2X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOEXP2X, stackRegs[0]))
end
def pow21X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOEXP21X, stackRegs[0]))
end
def powEX
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOEXPX, stackRegs[0]))
end
def powE1X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOEXP1X, stackRegs[0]))
end
def powE21X
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FOEXP21X, stackRegs[0]))
    end
def powXInt(powInt)
    sane:zpSave()
    return sane:zpRestore(sane:elOp2(FFEXT|FOXPWRI, stackRegs[0], powInt))
end
def powXY
    sane:zpSave()
    return sane:zpRestore(_drop(_swap(sane:elOp2(FFEXT|FOXPWRY, stackRegs[0], stackRegs[1]))))
end
def compXY
    sane:zpSave()
    return sane:zpRestore(_drop(_swap(sane:elOp2(FFEXT|FOCOMPND, stackRegs[0], stackRegs[1]))))
end
def annuityXY
    sane:zpSave()
    return sane:zpRestore(_drop(_swap(sane:elOp2(FFEXT|FOANNUIT, stackRegs[0], stackRegs[1]))))
end
def randNum(pSeed)
    sane:zpSave()
    return sane:zpRestore(sane:elOp1(FFEXT|FORANDX, pSeed))
end
//
// Push useful constants
//
def constPi
    return pushExt(@ext_pi)
end
def constE
    return pushExt(@ext_e)
end
//
// Reset FPU and SANE
//
def reset
    byte i
    word zero

    zero = 0
    sane:fpInit()
    sane:zpSave()
    for i = 0 to 3
        stackRegs[i] = @stack[i * t_extended]
        sane:fpOp2(FFINT|FOZ2X, stackRegs[i], @zero)
    next
    return sane:zpRestore(0)
end
done
