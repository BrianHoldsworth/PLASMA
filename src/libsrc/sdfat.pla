include "inc/spiport.plh"
//
// FAT I/O object
//
predef cwd, chdir, mkdir, rmdir, rename, remove, exists, openFirst, openNext, open
predef close, read, write, sync, rewind, seek, seekOfs, pos
predef size, truncate, isDir, isFile
//
// SD card FAT filesystem interface
//
export byte[] sdFAT
word[] = @cwd, @chdir, @mkdir, @rmdir, @rename, @remove, @exists, @openFirst, @openNext, @open
word[] = @close, @read, @write, @sync, @rewind, @seek, @seekOfs, @pos
word[] = @size, @truncate, @isDir, @isFile
//
// Directory related functions
//
def cwd(pathname)
    byte namelen
    
    namelen = 0
    spiSend(15)
    namelen = spiSend(15)//spiRecv
    if namelen
        spiReadBuf(pathname+1, namelen)
    fin
    ^pathname = namelen
    return namelen
end

def chdir(path)
    spiWriteBuf(path + 1, ^path)
    spiSend(16) // CHGDIR
    return spiSend(16)//spiRecv
end

def mkdir(path)
end

def rmdir(path)
end

def rename(newpath)
end

def remove
end

def exists(path)
end

def openDir(cmd, filename)
    byte namelen
    
    namelen = 0
    spiSend(cmd)
    namelen = spiSend(cmd)//spiRecv
    if namelen == 0xFF
        namelen = 0
    fin
    if namelen
        spiReadBuf(filename+1, namelen)
    fin
    ^filename = namelen
    return namelen
end
def openFirst(filename) // return filename in buffer
    return openDir(22, filename) // OPENFIRST
end

def openNext(filename) // return filename i buffer
    return openDir(23, filename) // OPENNEXT
end

//
// File related functions
//
def open(path)
end

def close
    spiSend(24) // CLOSE
end

def read(buf, len)
end

def write(buf, len)
end

def sync
end

def rewind
end

def seek
end

def seekOfs
end

def pos
end

def size
end

def truncate
end

def isDir
    spiSend(35) // ISDIR
    return spiSend(35)//spiRecv
end

def isFile
end

//
// Init SD card FAT filesystem
//
spiSend(14) // SDINIT
spiDelay(100)
return spiRecv <> '@' // Is Arduino READY?
done