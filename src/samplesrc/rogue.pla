import STDLIB
    predef syscall, call, memset, getc, putc, puts, putln
    predef memset, memcpy
    predef heapmark, heapallocallign, heapalloc, heaprelease, heapavail
    byte MACHID
end

const FALSE = 0
const TRUE  = not FALSE

//
// Octant beam parameters
//

const beamdepth = 24
const beampts   = 249

byte dbeam = 0,1,3,7,10,15,20,25,33,40,50,59,68,80,90,103,117,131,145
byte       = 159,178,195,213,231,248

byte[] xbeam
byte = 0
byte = 0
byte = 1,0
byte = 2,1,1,0
byte = 2,1,0
byte = 3,3,2,1,0
byte = 4,3,2,1,0
byte = 4,3,2,1,0
byte = 5,5,4,4,3,2,1,0
byte = 6,5,4,3,2,1,0
byte = 7,6,6,5,4,3,2,2,1,0
byte = 7,6,5,5,4,3,2,1,0
byte = 8,7,6,5,4,3,2,1,0
byte = 9,8,8,7,7,6,5,4,3,2,1,0
byte = 9,8,7,6,5,4,3,2,1,0
byte = 10,10,9,9,8,7,6,5,4,3,2,1,0
byte = 11,10,9,8,8,7,6,6,5,4,3,2,1,0
byte = 12,11,11,10,9,8,7,6,5,4,3,2,1,0
byte = 12,11,10,10,9,8,7,6,5,4,3,2,1,0
byte = 13,12,11,10,9,8,7,6,5,4,3,2,1,0
byte = 14,13,13,12,12,11,10,9,9,8,7,6,5,4,3,3,2,1,0
byte = 14,13,12,11,11,10,9,8,7,7,6,5,4,3,2,1,0
byte = 15,15,14,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
byte = 16,15,14,13,13,12,11,10,9,8,7,6,5,4,3,2,1,0
byte = 16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0

byte[] ybeam
byte = 0
byte = 1
byte = 1,2
byte = 2,2,3,3
byte = 3,4,4
byte = 3,4,4,5,5
byte = 4,5,5,6,6
byte = 5,6,6,7,7
byte = 5,6,6,7,7,7,8,8
byte = 6,7,8,8,8,9,9
byte = 7,7,8,8,9,9,9,10,10,10
byte = 8,9,9,10,10,10,11,11,11
byte = 8,9,10,11,11,11,12,12,12
byte = 9,9,10,10,11,11,12,12,12,13,13,13
byte = 10,11,12,12,13,13,13,14,14,14
byte = 10,11,11,12,12,13,13,14,14,14,15,15,15
byte = 11,12,13,13,14,14,14,15,15,15,15,16,16,16
byte = 12,12,13,13,14,15,15,16,16,16,16,17,17,17
byte = 13,14,14,15,15,16,16,17,17,17,17,18,18,18
byte = 13,14,15,16,16,17,17,18,18,18,18,19,19,19
byte = 14,14,15,15,16,16,17,17,18,18,18,19,19,19,19,20,20,20,20
byte = 15,16,17,17,18,18,19,19,19,20,20,20,20,21,21,21,21
byte = 15,16,16,17,17,18,19,19,20,20,21,21,21,21,22,22,22,22
byte = 16,17,18,18,19,19,20,20,21,21,22,22,22,22,23,23,23,23
byte = 17,18,19,20,20,21,21,22,22,23,23,23,23,24,24,24,24

byte[] vbeam
byte = 0
byte = 0
byte = 0,1
byte = 2,1,3,3
byte = 5,6,7
byte = 4,8,6,9,10
byte = 11,13,9,14,15
byte = 12,18,14,19,20
byte = 16,21,17,22,23,19,24,25
byte = 26,28,30,31,31,32,33
byte = 34,27,35,29,37,38,38,47,39,40
byte = 42,44,36,45,46,47,48,49,50
byte = 41,43,53,55,56,48,57,58,59
byte = 60,51,61,52,62,54,64,65,65,66,67,68
byte = 70,72,74,63,76,77,77,78,79,80
byte = 69,81,71,82,73,84,75,86,87,87,88,89,90
byte = 91,93,95,83,96,97,85,98,99,100,100,101,102,103
byte = 104,92,105,94,107,109,110,112,113,113,114,115,116,117
byte = 119,121,106,122,108,124,111,126,127,127,128,129,130,131
byte = 118,120,134,136,123,138,125,140,141,141,142,143,144,145
byte = 146,132,147,133,148,135,150,137,151,152,139,154,155,155,156,174,157,158
byte = 159
byte = 161,163,165,149,166,167,169,170,153,171,172,172,173,175,176,177,178
byte = 160,179,162,180,164,182,184,168,186,187,189,190,190,191,192,193,194,195
byte = 196,198,200,181,201,183,203,185,205,188,207,208,208,209,210,211,212,213
byte = 197,199,217,219,202,221,204,223,206,225,226,226,227,228,229,230,231

byte[beampts] vispix

const maprows = 21
const mapcols = 32
const WALL    = '#'
const VISWALL = $A3 // '#' | $80
const FLOOR   = '.'

byte[] map
byte = "###############################"
byte = "#.................#...........#"
byte = "#.............###.#.........#.#"
byte = "#......##.......#.#.........#.#"
byte = "#......##.......#.#.........#.#"
byte = "#...............#...........#.#"
byte = "#...............#...........#.#"
byte = "#......##.......#.#.........#.#"
byte = "#......##.......#.#.........#.#"
byte = "#...............#.#.........#.#"
byte = "#...............#.###########.#"
byte = "#......##.......#.#...........#"
byte = "#......##.......#.#......######"
byte = "#...............#.#......#....#"
byte = "#...............#.#......#....#"
byte = "#......##.......#.#......#....#"
byte = "#......##.......#.#......#....#"
byte = "#.#.............#.#......#....#"
byte = "#.###############.#......###..#"
byte = "#.................#...........#"
byte = "###############################"

word vismap

const xcentr = 20
const ycentr = 12

word[] screen
word = $400, $480, $500, $580, $600, $680, $700, $780
word = $428, $4A8, $528, $5A8, $628, $6A8, $728, $7A8
word = $450, $4D0, $550, $5D0, $650, $6D0, $750, $7D0

const SPEAKER = $C030

const maxlight = 10
word xdir =  0,  1,  1,  1,  0, -1, -1, -1
word ydir = -1, -1,  0,  1,  1,  1,  0, -1
word xplayer = 5
word yplayer = 5
byte aplayer = 0
byte lamp    = 4
byte fov     = 1
byte vplayer = '^', '\\', '>', '/', 'v', '\\', '<', '/'

def home
    return call($FC58, 0, 0, 0, 0)
end

def gotoxy(x, y)
    ^$24 = x + ^$20
    return call($FB5B, y + ^$22, 0, 0, 0)
end

def ouch
  byte i, delay
  
  for i = 0 to 255
    ^SPEAKER
    for delay = 0 to 1
    next
  next
end

def drawmap(xorg, yorg, dir, light)
  byte o, l, dist, tile, occlude
  word ymap, xmap, imap
  byte yscr, xscr

  //
  // Clear screen
  //
  home
  //
  // Draw background map
  //
  if light
    xmap = xorg - xcentr
    if xmap < 0
      l    = mapcols - 1
      xscr = -xmap
      xmap = 0
    else
      l    = mapcols - xmap - 1
      xscr = 0
    fin
    if xscr + l > 40
      l    = 40 - xscr
    fin
    for yscr = 0 to 23
      ymap = yscr - ycentr + yorg
      if ymap >= 0 and ymap < maprows
        memcpy(screen[yscr] + xscr, vismap  + (ymap << 5) + xmap + 1, l)
      fin
    next
    //
    // Draw visible octants
    //
    for o = dir - fov - 1 to dir + fov
      memset(@vispix, dbeam[light], TRUE)
      when o & 7
        is 0
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg - ybeam[l]) << 5) + xorg + xbeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) =  tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap + 1] == WALL
                  ^(vismap + imap + 1) = VISWALL
                  screen.[ycentr - ybeam[l], xcentr + xbeam[l] + 1] = WALL
                fin
              fin
              screen.[ycentr - ybeam[l], xcentr + xbeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 1
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg - xbeam[l]) << 5) + xorg + ybeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap - mapcols] == WALL
                  ^(vismap + imap - mapcols) = VISWALL
                  screen.[ycentr - xbeam[l] - 1, xcentr + ybeam[l]] = WALL
                fin
              fin
              screen.[ycentr - xbeam[l], xcentr + ybeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 2
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg + xbeam[l]) << 5) + xorg + ybeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap + mapcols] == WALL
                  ^(vismap + imap + mapcols) = VISWALL
                  screen.[ycentr + xbeam[l] + 1, xcentr + ybeam[l]] = WALL
                fin
              fin
              screen.[ycentr + xbeam[l], xcentr + ybeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 3
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg + ybeam[l]) << 5) + xorg + xbeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap + 1] == WALL
                  ^(vismap + imap + 1) = VISWALL
                  screen.[ycentr + ybeam[l], xcentr + xbeam[l] + 1] = WALL
                fin
              fin
              screen.[ycentr + ybeam[l], xcentr + xbeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 4
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg + ybeam[l]) << 5) + xorg - xbeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap - 1] == WALL
                  ^(vismap + imap - 1) = VISWALL
                  screen.[ycentr + ybeam[l], xcentr - xbeam[l] - 1] = WALL
                fin
              fin
              screen.[ycentr + ybeam[l], xcentr - xbeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 5
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg + xbeam[l]) << 5) + xorg - ybeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap + mapcols] == WALL
                  ^(vismap + imap + mapcols) = VISWALL
                  screen.[ycentr + xbeam[l] + 1, xcentr - ybeam[l]] = WALL
                fin
              fin
              screen.[ycentr + xbeam[l], xcentr - ybeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 6
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg - xbeam[l]) << 5) + xorg - ybeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap - mapcols] == WALL
                  ^(vismap + imap - mapcols) = VISWALL
                  screen.[ycentr - xbeam[l] - 1, xcentr - ybeam[l]] = WALL
                fin
              fin
              screen.[ycentr - xbeam[l], xcentr - ybeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
        is 7
          for l = 1 to dbeam[light]
            if vispix[vbeam[l]]
              imap = ((yorg - ybeam[l]) << 5) + xorg - xbeam[l] + 1
              tile = map[imap]
              ^(vismap + imap) = tile | $80
              if tile <> FLOOR
                vispix[l] = FALSE
              else
                if map[imap - 1] == WALL
                  ^(vismap + imap - 1) = VISWALL
                  screen.[ycentr - ybeam[l], xcentr - xbeam[l] - 1] = WALL
                fin
              fin
              screen.[ycentr - ybeam[l], xcentr - xbeam[l]] = tile
            else
              vispix[l] = FALSE
            fin
          next
          break
      wend
    next
    gotoxy(xcentr, ycentr)
    putc(vplayer[dir])
  else
    gotoxy(xcentr, ycentr)
    putc('@')
  fin
  gotoxy(xcentr, ycentr)
end

def moveplayer(dir)
  xplayer = xplayer + dir * xdir[aplayer]
  yplayer = yplayer + dir * ydir[aplayer]
  if map[yplayer * mapcols + xplayer + 1] <> FLOOR
    xplayer = xplayer - dir * xdir[aplayer]
    yplayer = yplayer - dir * ydir[aplayer]
    ouch
  fin
end

vismap = heapalloc(maprows * mapcols)
memset(vismap, maprows * mapcols, $A0A0)
while TRUE
  drawmap(xplayer, yplayer, aplayer, lamp)
  when getc()
    is ','
    is '<'
      if fov > 0
        fov = fov - 1
      fin
      break
    is '.'
    is '>'
      if fov < 4
        fov = fov + 1
      fin
      break
    is '-'
      if lamp > 0
        lamp = lamp - 1
      fin
      break
    is '+'
      if lamp < maxlight - 1
        lamp = lamp + 1
      fin
      break
    is 'i'
    is 'I'
      aplayer = 0
      moveplayer(1)
      break
    is 'j'
    is 'J'
      aplayer = 6
      moveplayer(1)
      break
    is 'k'
    is 'K'
      aplayer = 2
      moveplayer(1)
      break
    is 'm'
    is 'M'
      aplayer = 4
      moveplayer(1)
      break
    is 'q'
    is 'Q'
      moveplayer(1)
    is 'a'
    is 'A'
    is $0B
      moveplayer(1)
      break
    is 'z'
    is 'Z'
    is $0A
      moveplayer(-1)
      break
    is $08
      aplayer = (aplayer - 1) & 7
      break
    is $15
      aplayer = (aplayer + 1) & 7
      break
    is 'x'
    is 'X'
      return
  wend
loop
done
