import stdlib
    predef syscall, call, memset, getc, gets, putc, puts, putln
    predef memset, memcpy, modaddr, modexec
    predef heapmark, heapallocalign, heapalloc, heaprelease
    predef isugt, isuge, isult, isule
    byte MACHID
end
import memmgr
    predef sweep, brk, sbrk
    predef hmemNew, hmemLock, hmemUnlock, hmemRef, hmemDel, hmemAvail, hmemLargestAvail
    const MAX_MEMBLK_SIZE = $2000
end
word a, b, c, d, e, memptr
def putln
    return putc($0D)
end
def putb(hexb)
    return call($FDDA, hexb, 0, 0, 0)
end
def puth(hex)
    return call($F941, hex >> 8, hex, 0, 0)
end
def puti(i)
  if i < 0; putc('-'); i = -i; fin
  if i < 10
    putc(i + '0')
  else
    puti(i / 10)
    putc(i % 10 + '0')
  fin
end

sbrk($3000) // Set small pool size
puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
a = hmemNew(MAX_MEMBLK_SIZE)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
b = hmemNew(MAX_MEMBLK_SIZE)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
c = hmemNew(MAX_MEMBLK_SIZE)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
d = hmemNew(100)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
memptr = hmemLock(a)
if memptr; memset(memptr, MAX_MEMBLK_SIZE, $1111); fin
hmemUnlock(a)
memptr = hmemLock(b)
if memptr; memset(memptr, MAX_MEMBLK_SIZE, $2222); fin
hmemUnlock(b)
memptr = hmemLock(c)
if memptr; memset(memptr, MAX_MEMBLK_SIZE, $3333); fin
hmemUnlock(c)
memptr = hmemLock(a)
if memptr; puth(a); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
hmemUnlock(a)
hmemDel(a)
hmemLock(d)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
e = hmemNew(240)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
hmemLock(e)
hmemUnlock(d)
memptr = hmemLock(b)
if memptr; puth(b); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
hmemUnlock(b)
hmemUnlock(e)
hmemDel(b)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
memptr = hmemLock(c)
if memptr; puth(c); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
hmemUnlock(c)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
hmemDel(c)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
hmemDel(e)
//puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
hmemDel(d)
puth(hmemAvail); putc(' '); puth(hmemLargestAvail); putln
done